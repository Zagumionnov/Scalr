    openapi: 3.0.1
    info:
      title: Scalr task todo api
      description: 'This small api is used to manage todo tasks'
      contact:
        email: a.penchuk@scalr.com
      version: 1.0.0
    servers:
    - url: http://localhost:5000
    paths:
      /tasks:
        get:
          summary: Get all tasks from database
          operationId: get_tasks
          responses:
            200:
              description: successful operation
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/TaskListingDocument'
        post:
          summary: Create new task object
          operationId: create_task
          requestBody:
            description: Todo object that needs to be created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TaskDocument'
            required: true
          responses:
            201:
              description: successful operation
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/TaskDocument'
      /tasks/{id}:
        parameters:
        - name: id
          in: path
          description: The id of the task to retrieve
          required: true
          schema:
            type: string
        get:
          summary: Get task by id
          operationId: get_specific_tasks
          responses:
            200:
              description: successful operation
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/TaskDocument'
        patch:
          summary: Edit task by id
          operationId: modify_tasks
          requestBody:
            description: Todo object that needs to be created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ChangeTaskDocument'
          responses:
            200:
              description: successful operation
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/TaskDocument'
        delete:
          summary: Delete task object
          operationId: delete_task
          responses:
            204:
              description: successful operation
      /tasks/{id}/logs:
       parameters:
       - name: id
         in: path
         description: The task identifier
         required: true
         schema:
           type: string
       get:
        summary: Get task logs by id
        operationId: Get task logs
        responses:
          200:
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    logs:
                      type: string
    components:
     schemas:
      ChangeTaskDocument:
          description: Change API document
          type: object
          properties:
            title:
              type: string
            description:
              type: string
      TaskDocument:
          description: |-
            JSON:API Document.

            see: https://jsonapi.org/format/#document-structure
          properties:
            data:
              $ref: '#/components/schemas/Task'
            meta:
              readOnly: true
              type: object
          type: object
      TaskListingDocument:
          type: object
          description: |-
            JSON:API Document Listing
            see: https://jsonapi.org/format/#document-structure
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Task'
            meta:
              type: object
              readOnly: true
      Task:
          type: object
          description: The Docker task object model
          properties:
            id:
              type: string
              readOnly: true
            type:
              type: string
              enum:
              - tasks
              readOnly: true
            attributes:
              properties:
                title:
                  type: string
                  description: The name of the task.
                  example: 'Task 1'
                description:
                  type: string
                  description: The description of the task.
                  example: 'Hello world on ubuntu'
                command:
                  type: string
                  description: The command to run.
                  example: echo Hello World
                image:
                  type: string
                  description: The image to run.
                  example: ubuntu
                status:
                  description: "The task status"
                  readOnly: true
                  enum:
                    - pending
                    - running
                    - finished
                    - failed
                execution-time:
                  type: integer
                  description: "The task execution time"
                  readOnly: true
              required:
                - title
                - image
                - command
                - description
            links:
              properties:
                self:
                    type: string
                    description: "The self url link"
                    format: url
                logs:
                    type: string
                    description: "The self url link"
                    format: url
              type: object
              readOnly: true